// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity(in *jlexer.Lexer, out *UserStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "follow":
			out.Follow = int(in.Int())
		case "vip":
			out.Vip = int(in.Int())
		case "like_state":
			out.LikeState = int(in.Int())
		case "demand_no_pay_epids":
			if m, ok := out.DemandNoPayEpids.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DemandNoPayEpids.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DemandNoPayEpids = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity(out *jwriter.Writer, in UserStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"follow\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Follow))
	}
	{
		const prefix string = ",\"vip\":"
		out.RawString(prefix)
		out.Int(int(in.Vip))
	}
	{
		const prefix string = ",\"like_state\":"
		out.RawString(prefix)
		out.Int(int(in.LikeState))
	}
	{
		const prefix string = ",\"demand_no_pay_epids\":"
		out.RawString(prefix)
		if m, ok := in.DemandNoPayEpids.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DemandNoPayEpids.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DemandNoPayEpids))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity1(in *jlexer.Lexer, out *Subtitles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "key":
			out.Key = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "is_machine":
			out.IsMachine = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity1(out *jwriter.Writer, in Subtitles) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"is_machine\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMachine))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subtitles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subtitles) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subtitles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subtitles) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity1(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity2(in *jlexer.Lexer, out *Styles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "url":
			out.URL = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity2(out *jwriter.Writer, in Styles) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Styles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Styles) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Styles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Styles) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity2(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity3(in *jlexer.Lexer, out *StatFormat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "play":
			out.Play = string(in.String())
		case "likes":
			out.Likes = string(in.String())
		case "share":
			out.Share = string(in.String())
		case "reply":
			out.Reply = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity3(out *jwriter.Writer, in StatFormat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"play\":"
		out.RawString(prefix[1:])
		out.String(string(in.Play))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.String(string(in.Likes))
	}
	{
		const prefix string = ",\"share\":"
		out.RawString(prefix)
		out.String(string(in.Share))
	}
	{
		const prefix string = ",\"reply\":"
		out.RawString(prefix)
		out.String(string(in.Reply))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatFormat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatFormat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatFormat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatFormat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity3(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity4(in *jlexer.Lexer, out *Stat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "favorites":
			out.Favorites = int(in.Int())
		case "views":
			out.Views = int(in.Int())
		case "danmakus":
			out.Danmakus = int(in.Int())
		case "coins":
			out.Coins = int(in.Int())
		case "reply":
			out.Reply = int(in.Int())
		case "share":
			out.Share = int(in.Int())
		case "hot":
			out.Hot = int(in.Int())
		case "play":
			out.Play = string(in.String())
		case "followers":
			out.Followers = string(in.String())
		case "series_play":
			out.SeriesPlay = string(in.String())
		case "likes":
			out.Likes = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity4(out *jwriter.Writer, in Stat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"favorites\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Favorites))
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		out.Int(int(in.Views))
	}
	{
		const prefix string = ",\"danmakus\":"
		out.RawString(prefix)
		out.Int(int(in.Danmakus))
	}
	{
		const prefix string = ",\"coins\":"
		out.RawString(prefix)
		out.Int(int(in.Coins))
	}
	{
		const prefix string = ",\"reply\":"
		out.RawString(prefix)
		out.Int(int(in.Reply))
	}
	{
		const prefix string = ",\"share\":"
		out.RawString(prefix)
		out.Int(int(in.Share))
	}
	{
		const prefix string = ",\"hot\":"
		out.RawString(prefix)
		out.Int(int(in.Hot))
	}
	{
		const prefix string = ",\"play\":"
		out.RawString(prefix)
		out.String(string(in.Play))
	}
	{
		const prefix string = ",\"followers\":"
		out.RawString(prefix)
		out.String(string(in.Followers))
	}
	{
		const prefix string = ",\"series_play\":"
		out.RawString(prefix)
		out.String(string(in.SeriesPlay))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity4(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity5(in *jlexer.Lexer, out *SeasonResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		case "success":
			out.Success = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity5(out *jwriter.Writer, in SeasonResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		(in.Result).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.Bool(bool(in.Success))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SeasonResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SeasonResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SeasonResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SeasonResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity5(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity6(in *jlexer.Lexer, out *Rights) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "copyright":
			out.Copyright = string(in.String())
		case "allow_bp":
			out.AllowBp = int(in.Int())
		case "allow_download":
			out.AllowDownload = int(in.Int())
		case "area_limit":
			out.AreaLimit = int(in.Int())
		case "allow_review":
			out.AllowReview = int(in.Int())
		case "is_preview":
			out.IsPreview = int(in.Int())
		case "ban_area_show":
			out.BanAreaShow = int(in.Int())
		case "allow_bp_rank":
			out.AllowBpRank = int(in.Int())
		case "can_watch":
			out.CanWatch = int(in.Int())
		case "forbidPre":
			out.Forbidpre = int(in.Int())
		case "onlyVipDownload":
			out.Onlyvipdownload = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity6(out *jwriter.Writer, in Rights) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"copyright\":"
		out.RawString(prefix[1:])
		out.String(string(in.Copyright))
	}
	{
		const prefix string = ",\"allow_bp\":"
		out.RawString(prefix)
		out.Int(int(in.AllowBp))
	}
	{
		const prefix string = ",\"allow_download\":"
		out.RawString(prefix)
		out.Int(int(in.AllowDownload))
	}
	{
		const prefix string = ",\"area_limit\":"
		out.RawString(prefix)
		out.Int(int(in.AreaLimit))
	}
	{
		const prefix string = ",\"allow_review\":"
		out.RawString(prefix)
		out.Int(int(in.AllowReview))
	}
	{
		const prefix string = ",\"is_preview\":"
		out.RawString(prefix)
		out.Int(int(in.IsPreview))
	}
	{
		const prefix string = ",\"ban_area_show\":"
		out.RawString(prefix)
		out.Int(int(in.BanAreaShow))
	}
	{
		const prefix string = ",\"allow_bp_rank\":"
		out.RawString(prefix)
		out.Int(int(in.AllowBpRank))
	}
	{
		const prefix string = ",\"can_watch\":"
		out.RawString(prefix)
		out.Int(int(in.CanWatch))
	}
	{
		const prefix string = ",\"forbidPre\":"
		out.RawString(prefix)
		out.Int(int(in.Forbidpre))
	}
	{
		const prefix string = ",\"onlyVipDownload\":"
		out.RawString(prefix)
		out.Int(int(in.Onlyvipdownload))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rights) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rights) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rights) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rights) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity6(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity7(in *jlexer.Lexer, out *Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "season_id":
			out.SeasonID = int(in.Int())
		case "alias":
			out.Alias = string(in.String())
		case "comment_restriction":
			out.CommentRestriction = string(in.String())
		case "no_comment":
			out.NoComment = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "subtitle":
			out.Subtitle = string(in.String())
		case "dynamic_subtitle":
			out.DynamicSubtitle = string(in.String())
		case "season_title":
			out.SeasonTitle = string(in.String())
		case "square_cover":
			out.SquareCover = string(in.String())
		case "refine_cover":
			out.RefineCover = string(in.String())
		case "share_url":
			out.ShareURL = string(in.String())
		case "share_copy":
			out.ShareCopy = string(in.String())
		case "short_link":
			out.ShortLink = string(in.String())
		case "evaluate":
			out.Evaluate = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "type_name":
			out.TypeName = string(in.String())
		case "mode":
			out.Mode = int(in.Int())
		case "status":
			out.Status = int(in.Int())
		case "total":
			out.Total = int(in.Int())
		case "rights":
			(out.Rights).UnmarshalEasyJSON(in)
		case "publish":
			(out.Publish).UnmarshalEasyJSON(in)
		case "detail":
			out.Detail = string(in.String())
		case "staff":
			if m, ok := out.Staff.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Staff.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Staff = in.Interface()
			}
		case "actor":
			(out.Actor).UnmarshalEasyJSON(in)
		case "origin_name":
			out.OriginName = string(in.String())
		case "styles":
			if in.IsNull() {
				in.Skip()
				out.Styles = nil
			} else {
				in.Delim('[')
				if out.Styles == nil {
					if !in.IsDelim(']') {
						out.Styles = make([]Styles, 0, 1)
					} else {
						out.Styles = []Styles{}
					}
				} else {
					out.Styles = (out.Styles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Styles
					(v1).UnmarshalEasyJSON(in)
					out.Styles = append(out.Styles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "modules":
			if in.IsNull() {
				in.Skip()
				out.Modules = nil
			} else {
				in.Delim('[')
				if out.Modules == nil {
					if !in.IsDelim(']') {
						out.Modules = make([]Modules, 0, 0)
					} else {
						out.Modules = []Modules{}
					}
				} else {
					out.Modules = (out.Modules)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Modules
					(v2).UnmarshalEasyJSON(in)
					out.Modules = append(out.Modules, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "up_info":
			if m, ok := out.UpInfo.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UpInfo.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UpInfo = in.Interface()
			}
		case "user_status":
			(out.UserStatus).UnmarshalEasyJSON(in)
		case "new_ep":
			(out.NewEp).UnmarshalEasyJSON(in)
		case "rating":
			if m, ok := out.Rating.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Rating.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Rating = in.Interface()
			}
		case "stat":
			(out.Stat).UnmarshalEasyJSON(in)
		case "stat_format":
			(out.StatFormat).UnmarshalEasyJSON(in)
		case "cover":
			out.Cover = string(in.String())
		case "horizon_cover":
			out.HorizonCover = string(in.String())
		case "areas":
			if in.IsNull() {
				in.Skip()
				out.Areas = nil
			} else {
				in.Delim('[')
				if out.Areas == nil {
					if !in.IsDelim(']') {
						out.Areas = make([]Areas, 0, 2)
					} else {
						out.Areas = []Areas{}
					}
				} else {
					out.Areas = (out.Areas)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Areas
					(v3).UnmarshalEasyJSON(in)
					out.Areas = append(out.Areas, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "limit":
			if m, ok := out.Limit.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Limit.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Limit = in.Interface()
			}
		case "payment":
			if m, ok := out.Payment.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Payment.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Payment = in.Interface()
			}
		case "activity_dialog":
			if m, ok := out.ActivityDialog.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ActivityDialog.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ActivityDialog = in.Interface()
			}
		case "login_dialog":
			if m, ok := out.LoginDialog.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.LoginDialog.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.LoginDialog = in.Interface()
			}
		case "update_partten":
			out.UpdatePartten = string(in.String())
		case "subtitle_suggest_key":
			out.SubtitleSuggestKey = string(in.String())
		case "open_skip_switch":
			out.OpenSkipSwitch = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity7(out *jwriter.Writer, in Result) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"season_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SeasonID))
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"comment_restriction\":"
		out.RawString(prefix)
		out.String(string(in.CommentRestriction))
	}
	{
		const prefix string = ",\"no_comment\":"
		out.RawString(prefix)
		out.String(string(in.NoComment))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"subtitle\":"
		out.RawString(prefix)
		out.String(string(in.Subtitle))
	}
	{
		const prefix string = ",\"dynamic_subtitle\":"
		out.RawString(prefix)
		out.String(string(in.DynamicSubtitle))
	}
	{
		const prefix string = ",\"season_title\":"
		out.RawString(prefix)
		out.String(string(in.SeasonTitle))
	}
	{
		const prefix string = ",\"square_cover\":"
		out.RawString(prefix)
		out.String(string(in.SquareCover))
	}
	{
		const prefix string = ",\"refine_cover\":"
		out.RawString(prefix)
		out.String(string(in.RefineCover))
	}
	{
		const prefix string = ",\"share_url\":"
		out.RawString(prefix)
		out.String(string(in.ShareURL))
	}
	{
		const prefix string = ",\"share_copy\":"
		out.RawString(prefix)
		out.String(string(in.ShareCopy))
	}
	{
		const prefix string = ",\"short_link\":"
		out.RawString(prefix)
		out.String(string(in.ShortLink))
	}
	{
		const prefix string = ",\"evaluate\":"
		out.RawString(prefix)
		out.String(string(in.Evaluate))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"type_name\":"
		out.RawString(prefix)
		out.String(string(in.TypeName))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.Int(int(in.Mode))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"rights\":"
		out.RawString(prefix)
		(in.Rights).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"publish\":"
		out.RawString(prefix)
		(in.Publish).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"detail\":"
		out.RawString(prefix)
		out.String(string(in.Detail))
	}
	{
		const prefix string = ",\"staff\":"
		out.RawString(prefix)
		if m, ok := in.Staff.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Staff.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Staff))
		}
	}
	{
		const prefix string = ",\"actor\":"
		out.RawString(prefix)
		(in.Actor).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"origin_name\":"
		out.RawString(prefix)
		out.String(string(in.OriginName))
	}
	{
		const prefix string = ",\"styles\":"
		out.RawString(prefix)
		if in.Styles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Styles {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"modules\":"
		out.RawString(prefix)
		if in.Modules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Modules {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"up_info\":"
		out.RawString(prefix)
		if m, ok := in.UpInfo.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UpInfo.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UpInfo))
		}
	}
	{
		const prefix string = ",\"user_status\":"
		out.RawString(prefix)
		(in.UserStatus).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"new_ep\":"
		out.RawString(prefix)
		(in.NewEp).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		if m, ok := in.Rating.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Rating.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Rating))
		}
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		(in.Stat).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"stat_format\":"
		out.RawString(prefix)
		(in.StatFormat).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cover\":"
		out.RawString(prefix)
		out.String(string(in.Cover))
	}
	{
		const prefix string = ",\"horizon_cover\":"
		out.RawString(prefix)
		out.String(string(in.HorizonCover))
	}
	{
		const prefix string = ",\"areas\":"
		out.RawString(prefix)
		if in.Areas == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Areas {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		if m, ok := in.Limit.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Limit.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Limit))
		}
	}
	{
		const prefix string = ",\"payment\":"
		out.RawString(prefix)
		if m, ok := in.Payment.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Payment.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Payment))
		}
	}
	{
		const prefix string = ",\"activity_dialog\":"
		out.RawString(prefix)
		if m, ok := in.ActivityDialog.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ActivityDialog.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ActivityDialog))
		}
	}
	{
		const prefix string = ",\"login_dialog\":"
		out.RawString(prefix)
		if m, ok := in.LoginDialog.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.LoginDialog.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.LoginDialog))
		}
	}
	{
		const prefix string = ",\"update_partten\":"
		out.RawString(prefix)
		out.String(string(in.UpdatePartten))
	}
	{
		const prefix string = ",\"subtitle_suggest_key\":"
		out.RawString(prefix)
		out.String(string(in.SubtitleSuggestKey))
	}
	{
		const prefix string = ",\"open_skip_switch\":"
		out.RawString(prefix)
		out.Bool(bool(in.OpenSkipSwitch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity7(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity8(in *jlexer.Lexer, out *Publish) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pub_time":
			out.PubTime = string(in.String())
		case "pub_time_show":
			out.PubTimeShow = string(in.String())
		case "is_started":
			out.IsStarted = int(in.Int())
		case "is_finish":
			out.IsFinish = int(in.Int())
		case "weekday":
			out.Weekday = int(in.Int())
		case "release_date_show":
			out.ReleaseDateShow = string(in.String())
		case "time_length_show":
			out.TimeLengthShow = string(in.String())
		case "unknow_pub_date":
			out.UnknowPubDate = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity8(out *jwriter.Writer, in Publish) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pub_time\":"
		out.RawString(prefix[1:])
		out.String(string(in.PubTime))
	}
	{
		const prefix string = ",\"pub_time_show\":"
		out.RawString(prefix)
		out.String(string(in.PubTimeShow))
	}
	{
		const prefix string = ",\"is_started\":"
		out.RawString(prefix)
		out.Int(int(in.IsStarted))
	}
	{
		const prefix string = ",\"is_finish\":"
		out.RawString(prefix)
		out.Int(int(in.IsFinish))
	}
	{
		const prefix string = ",\"weekday\":"
		out.RawString(prefix)
		out.Int(int(in.Weekday))
	}
	{
		const prefix string = ",\"release_date_show\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDateShow))
	}
	{
		const prefix string = ",\"time_length_show\":"
		out.RawString(prefix)
		out.String(string(in.TimeLengthShow))
	}
	{
		const prefix string = ",\"unknow_pub_date\":"
		out.RawString(prefix)
		out.Int(int(in.UnknowPubDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Publish) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Publish) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Publish) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Publish) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity8(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity9(in *jlexer.Lexer, out *NewEp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "new_ep_display":
			out.NewEpDisplay = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity9(out *jwriter.Writer, in NewEp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"new_ep_display\":"
		out.RawString(prefix)
		out.String(string(in.NewEpDisplay))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewEp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewEp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewEp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewEp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity9(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity10(in *jlexer.Lexer, out *Modules) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "style":
			out.Style = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "more":
			out.More = string(in.String())
		case "can_ord_desc":
			out.CanOrdDesc = int(in.Int())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "module_style":
			(out.ModuleStyle).UnmarshalEasyJSON(in)
		case "partition":
			out.Partition = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity10(out *jwriter.Writer, in Modules) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"style\":"
		out.RawString(prefix)
		out.String(string(in.Style))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"more\":"
		out.RawString(prefix)
		out.String(string(in.More))
	}
	{
		const prefix string = ",\"can_ord_desc\":"
		out.RawString(prefix)
		out.Int(int(in.CanOrdDesc))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"module_style\":"
		out.RawString(prefix)
		(in.ModuleStyle).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"partition\":"
		out.RawString(prefix)
		out.Int(int(in.Partition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Modules) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Modules) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Modules) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Modules) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity10(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity11(in *jlexer.Lexer, out *ModuleStyle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "line":
			out.Line = int(in.Int())
		case "hidden":
			out.Hidden = int(in.Int())
		case "show_pages":
			if m, ok := out.ShowPages.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ShowPages.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ShowPages = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity11(out *jwriter.Writer, in ModuleStyle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"line\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Line))
	}
	{
		const prefix string = ",\"hidden\":"
		out.RawString(prefix)
		out.Int(int(in.Hidden))
	}
	{
		const prefix string = ",\"show_pages\":"
		out.RawString(prefix)
		if m, ok := in.ShowPages.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ShowPages.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ShowPages))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ModuleStyle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ModuleStyle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ModuleStyle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ModuleStyle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity11(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity12(in *jlexer.Lexer, out *Episodes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aid":
			out.Aid = int(in.Int())
		case "cid":
			out.Cid = int(in.Int())
		case "cover":
			out.Cover = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "long_title":
			out.LongTitle = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "from":
			out.From = string(in.String())
		case "share_url":
			out.ShareURL = string(in.String())
		case "dimension":
			(out.Dimension).UnmarshalEasyJSON(in)
		case "jump":
			if m, ok := out.Jump.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Jump.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Jump = in.Interface()
			}
		case "title_display":
			out.TitleDisplay = string(in.String())
		case "long_title_display":
			out.LongTitleDisplay = string(in.String())
		case "subtitles":
			if in.IsNull() {
				in.Skip()
				out.Subtitles = nil
			} else {
				in.Delim('[')
				if out.Subtitles == nil {
					if !in.IsDelim(']') {
						out.Subtitles = make([]Subtitles, 0, 1)
					} else {
						out.Subtitles = []Subtitles{}
					}
				} else {
					out.Subtitles = (out.Subtitles)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Subtitles
					(v10).UnmarshalEasyJSON(in)
					out.Subtitles = append(out.Subtitles, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity12(out *jwriter.Writer, in Episodes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"aid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Aid))
	}
	{
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.Int(int(in.Cid))
	}
	{
		const prefix string = ",\"cover\":"
		out.RawString(prefix)
		out.String(string(in.Cover))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"long_title\":"
		out.RawString(prefix)
		out.String(string(in.LongTitle))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"share_url\":"
		out.RawString(prefix)
		out.String(string(in.ShareURL))
	}
	{
		const prefix string = ",\"dimension\":"
		out.RawString(prefix)
		(in.Dimension).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"jump\":"
		out.RawString(prefix)
		if m, ok := in.Jump.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Jump.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Jump))
		}
	}
	{
		const prefix string = ",\"title_display\":"
		out.RawString(prefix)
		out.String(string(in.TitleDisplay))
	}
	{
		const prefix string = ",\"long_title_display\":"
		out.RawString(prefix)
		out.String(string(in.LongTitleDisplay))
	}
	{
		const prefix string = ",\"subtitles\":"
		out.RawString(prefix)
		if in.Subtitles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Subtitles {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Episodes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Episodes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Episodes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Episodes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity12(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity13(in *jlexer.Lexer, out *Dimension) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "rotate":
			out.Rotate = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity13(out *jwriter.Writer, in Dimension) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"rotate\":"
		out.RawString(prefix)
		out.Int(int(in.Rotate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Dimension) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Dimension) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Dimension) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Dimension) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity13(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity14(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "episodes":
			if in.IsNull() {
				in.Skip()
				out.Episodes = nil
			} else {
				in.Delim('[')
				if out.Episodes == nil {
					if !in.IsDelim(']') {
						out.Episodes = make([]Episodes, 0, 0)
					} else {
						out.Episodes = []Episodes{}
					}
				} else {
					out.Episodes = (out.Episodes)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Episodes
					(v13).UnmarshalEasyJSON(in)
					out.Episodes = append(out.Episodes, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity14(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"episodes\":"
		out.RawString(prefix[1:])
		if in.Episodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Episodes {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity14(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity15(in *jlexer.Lexer, out *Areas) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity15(out *jwriter.Writer, in Areas) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Areas) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Areas) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Areas) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Areas) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity15(l, v)
}
func easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity16(in *jlexer.Lexer, out *Actor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "info":
			out.Info = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity16(out *jwriter.Writer, in Actor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		out.String(string(in.Info))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Actor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Actor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE75eee3fEncodeGithubComJasonKhew96BiliroamingGoServerEntity16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Actor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Actor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE75eee3fDecodeGithubComJasonKhew96BiliroamingGoServerEntity16(l, v)
}
