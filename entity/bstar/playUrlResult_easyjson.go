// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bstar

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCb88a3b8DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(in *jlexer.Lexer, out *PlayUrlResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "ttl":
			out.TTL = int(in.Int())
		case "data":
			easyjsonCb88a3b8Decode(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCb88a3b8EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(out *jwriter.Writer, in PlayUrlResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ttl\":"
		out.RawString(prefix)
		out.Int(int(in.TTL))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjsonCb88a3b8Encode(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlayUrlResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCb88a3b8EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayUrlResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCb88a3b8EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlayUrlResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCb88a3b8DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayUrlResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCb88a3b8DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(l, v)
}
func easyjsonCb88a3b8Decode(in *jlexer.Lexer, out *struct {
	VideoInfo struct {
		Quality    int           `json:"quality"`
		Timelength int           `json:"timelength"`
		StreamList []interface{} `json:"stream_list"`
		DashAudio  []interface{} `json:"dash_audio"`
	} `json:"video_info"`
	Dimension interface{} `json:"dimension"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "video_info":
			easyjsonCb88a3b8Decode1(in, &out.VideoInfo)
		case "dimension":
			if m, ok := out.Dimension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Dimension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Dimension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCb88a3b8Encode(out *jwriter.Writer, in struct {
	VideoInfo struct {
		Quality    int           `json:"quality"`
		Timelength int           `json:"timelength"`
		StreamList []interface{} `json:"stream_list"`
		DashAudio  []interface{} `json:"dash_audio"`
	} `json:"video_info"`
	Dimension interface{} `json:"dimension"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"video_info\":"
		out.RawString(prefix[1:])
		easyjsonCb88a3b8Encode1(out, in.VideoInfo)
	}
	{
		const prefix string = ",\"dimension\":"
		out.RawString(prefix)
		if m, ok := in.Dimension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Dimension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Dimension))
		}
	}
	out.RawByte('}')
}
func easyjsonCb88a3b8Decode1(in *jlexer.Lexer, out *struct {
	Quality    int           `json:"quality"`
	Timelength int           `json:"timelength"`
	StreamList []interface{} `json:"stream_list"`
	DashAudio  []interface{} `json:"dash_audio"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "quality":
			out.Quality = int(in.Int())
		case "timelength":
			out.Timelength = int(in.Int())
		case "stream_list":
			if in.IsNull() {
				in.Skip()
				out.StreamList = nil
			} else {
				in.Delim('[')
				if out.StreamList == nil {
					if !in.IsDelim(']') {
						out.StreamList = make([]interface{}, 0, 4)
					} else {
						out.StreamList = []interface{}{}
					}
				} else {
					out.StreamList = (out.StreamList)[:0]
				}
				for !in.IsDelim(']') {
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					out.StreamList = append(out.StreamList, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dash_audio":
			if in.IsNull() {
				in.Skip()
				out.DashAudio = nil
			} else {
				in.Delim('[')
				if out.DashAudio == nil {
					if !in.IsDelim(']') {
						out.DashAudio = make([]interface{}, 0, 4)
					} else {
						out.DashAudio = []interface{}{}
					}
				} else {
					out.DashAudio = (out.DashAudio)[:0]
				}
				for !in.IsDelim(']') {
					var v2 interface{}
					if m, ok := v2.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v2.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v2 = in.Interface()
					}
					out.DashAudio = append(out.DashAudio, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCb88a3b8Encode1(out *jwriter.Writer, in struct {
	Quality    int           `json:"quality"`
	Timelength int           `json:"timelength"`
	StreamList []interface{} `json:"stream_list"`
	DashAudio  []interface{} `json:"dash_audio"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"quality\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Quality))
	}
	{
		const prefix string = ",\"timelength\":"
		out.RawString(prefix)
		out.Int(int(in.Timelength))
	}
	{
		const prefix string = ",\"stream_list\":"
		out.RawString(prefix)
		if in.StreamList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.StreamList {
				if v3 > 0 {
					out.RawByte(',')
				}
				if m, ok := v4.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v4.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v4))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"dash_audio\":"
		out.RawString(prefix)
		if in.DashAudio == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.DashAudio {
				if v5 > 0 {
					out.RawByte(',')
				}
				if m, ok := v6.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v6.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v6))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
