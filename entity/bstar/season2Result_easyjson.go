// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bstar

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(in *jlexer.Lexer, out *Season2Sections) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "ep_list_title":
			out.EpListTitle = string(in.String())
		case "section":
			if in.IsNull() {
				in.Skip()
				out.Section = nil
			} else {
				in.Delim('[')
				if out.Section == nil {
					if !in.IsDelim(']') {
						out.Section = make([]Season2Section, 0, 1)
					} else {
						out.Section = []Season2Section{}
					}
				} else {
					out.Section = (out.Section)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Season2Section
					(v1).UnmarshalEasyJSON(in)
					out.Section = append(out.Section, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(out *jwriter.Writer, in Season2Sections) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"ep_list_title\":"
		out.RawString(prefix)
		out.String(string(in.EpListTitle))
	}
	{
		const prefix string = ",\"section\":"
		out.RawString(prefix)
		if in.Section == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Section {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Season2Sections) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Season2Sections) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Season2Sections) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Season2Sections) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(l, v)
}
func easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(in *jlexer.Lexer, out *Season2Section) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "style":
			out.Style = string(in.String())
		case "ep_details":
			if in.IsNull() {
				in.Skip()
				out.EpDetails = nil
			} else {
				in.Delim('[')
				if out.EpDetails == nil {
					if !in.IsDelim(']') {
						out.EpDetails = make([]Season2EpDetails, 0, 0)
					} else {
						out.EpDetails = []Season2EpDetails{}
					}
				} else {
					out.EpDetails = (out.EpDetails)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Season2EpDetails
					(v4).UnmarshalEasyJSON(in)
					out.EpDetails = append(out.EpDetails, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(out *jwriter.Writer, in Season2Section) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"style\":"
		out.RawString(prefix)
		out.String(string(in.Style))
	}
	{
		const prefix string = ",\"ep_details\":"
		out.RawString(prefix)
		if in.EpDetails == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.EpDetails {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Season2Section) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Season2Section) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Season2Section) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Season2Section) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(l, v)
}
func easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar2(in *jlexer.Lexer, out *Season2Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "ttl":
			out.TTL = int(in.Int())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar2(out *jwriter.Writer, in Season2Result) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ttl\":"
		out.RawString(prefix)
		out.Int(int(in.TTL))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Season2Result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Season2Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Season2Result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Season2Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar2(l, v)
}
func easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar3(in *jlexer.Lexer, out *Season2EpDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "horizontal_cover":
			out.HorizontalCover = string(in.String())
		case "badge":
			if m, ok := out.Badge.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Badge.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Badge = in.Interface()
			}
		case "episode_id":
			out.EpisodeID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "short_title":
			out.ShortTitle = string(in.String())
		case "long_title":
			out.LongTitle = string(in.String())
		case "long_title_display":
			out.LongTitleDisplay = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "jump":
			if m, ok := out.Jump.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Jump.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Jump = in.Interface()
			}
		case "dialog":
			if m, ok := out.Dialog.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Dialog.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Dialog = in.Interface()
			}
		case "subtitles":
			if in.IsNull() {
				in.Skip()
				out.Subtitles = nil
			} else {
				in.Delim('[')
				if out.Subtitles == nil {
					if !in.IsDelim(']') {
						out.Subtitles = make([]Subtitles, 0, 1)
					} else {
						out.Subtitles = []Subtitles{}
					}
				} else {
					out.Subtitles = (out.Subtitles)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Subtitles
					(v7).UnmarshalEasyJSON(in)
					out.Subtitles = append(out.Subtitles, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dimension":
			if m, ok := out.Dimension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Dimension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Dimension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar3(out *jwriter.Writer, in Season2EpDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"horizontal_cover\":"
		out.RawString(prefix[1:])
		out.String(string(in.HorizontalCover))
	}
	{
		const prefix string = ",\"badge\":"
		out.RawString(prefix)
		if m, ok := in.Badge.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Badge.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Badge))
		}
	}
	{
		const prefix string = ",\"episode_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.EpisodeID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"short_title\":"
		out.RawString(prefix)
		out.String(string(in.ShortTitle))
	}
	{
		const prefix string = ",\"long_title\":"
		out.RawString(prefix)
		out.String(string(in.LongTitle))
	}
	{
		const prefix string = ",\"long_title_display\":"
		out.RawString(prefix)
		out.String(string(in.LongTitleDisplay))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"jump\":"
		out.RawString(prefix)
		if m, ok := in.Jump.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Jump.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Jump))
		}
	}
	{
		const prefix string = ",\"dialog\":"
		out.RawString(prefix)
		if m, ok := in.Dialog.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Dialog.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Dialog))
		}
	}
	{
		const prefix string = ",\"subtitles\":"
		out.RawString(prefix)
		if in.Subtitles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Subtitles {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"dimension\":"
		out.RawString(prefix)
		if m, ok := in.Dimension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Dimension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Dimension))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Season2EpDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Season2EpDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Season2EpDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Season2EpDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar3(l, v)
}
func easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar4(in *jlexer.Lexer, out *Season2Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "experiments":
			if m, ok := out.Experiments.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Experiments.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Experiments = in.Interface()
			}
		case "comment_restriction":
			out.CommentRestriction = string(in.String())
		case "no_comment":
			out.NoComment = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "limit":
			out.Limit = string(in.String())
		case "update_desc":
			out.UpdateDesc = string(in.String())
		case "subtitle_suggest_key":
			out.SubtitleSuggestKey = string(in.String())
		case "season_id":
			out.SeasonID = int64(in.Int64())
		case "open_skip_switch":
			out.OpenSkipSwitch = bool(in.Bool())
		case "allow_download":
			out.AllowDownload = bool(in.Bool())
		case "horizon_cover":
			out.HorizonCover = string(in.String())
		case "episode_card_style":
			out.EpisodeCardStyle = int(in.Int())
		case "interactive_icons":
			if in.IsNull() {
				in.Skip()
				out.InteractiveIcons = nil
			} else {
				in.Delim('[')
				if out.InteractiveIcons == nil {
					if !in.IsDelim(']') {
						out.InteractiveIcons = make([]string, 0, 4)
					} else {
						out.InteractiveIcons = []string{}
					}
				} else {
					out.InteractiveIcons = (out.InteractiveIcons)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.InteractiveIcons = append(out.InteractiveIcons, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "remind":
			if m, ok := out.Remind.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Remind.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Remind = in.Interface()
			}
		case "user_status":
			if m, ok := out.UserStatus.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UserStatus.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UserStatus = in.Interface()
			}
		case "subscribe_guide":
			if m, ok := out.SubscribeGuide.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.SubscribeGuide.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.SubscribeGuide = in.Interface()
			}
		case "sections":
			(out.Sections).UnmarshalEasyJSON(in)
		case "info":
			if m, ok := out.Info.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Info.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Info = in.Interface()
			}
		case "details":
			if m, ok := out.Details.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Details.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Details = in.Interface()
			}
		case "stat":
			if m, ok := out.Stat.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Stat.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Stat = in.Interface()
			}
		case "season_series":
			if in.IsNull() {
				in.Skip()
				out.SeasonSeries = nil
			} else {
				in.Delim('[')
				if out.SeasonSeries == nil {
					if !in.IsDelim(']') {
						out.SeasonSeries = make([]interface{}, 0, 4)
					} else {
						out.SeasonSeries = []interface{}{}
					}
				} else {
					out.SeasonSeries = (out.SeasonSeries)[:0]
				}
				for !in.IsDelim(']') {
					var v11 interface{}
					if m, ok := v11.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v11.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v11 = in.Interface()
					}
					out.SeasonSeries = append(out.SeasonSeries, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "related":
			if m, ok := out.Related.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Related.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Related = in.Interface()
			}
		case "for_you":
			if m, ok := out.ForYou.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ForYou.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ForYou = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar4(out *jwriter.Writer, in Season2Data) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"experiments\":"
		out.RawString(prefix[1:])
		if m, ok := in.Experiments.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Experiments.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Experiments))
		}
	}
	{
		const prefix string = ",\"comment_restriction\":"
		out.RawString(prefix)
		out.String(string(in.CommentRestriction))
	}
	{
		const prefix string = ",\"no_comment\":"
		out.RawString(prefix)
		out.String(string(in.NoComment))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.String(string(in.Limit))
	}
	{
		const prefix string = ",\"update_desc\":"
		out.RawString(prefix)
		out.String(string(in.UpdateDesc))
	}
	{
		const prefix string = ",\"subtitle_suggest_key\":"
		out.RawString(prefix)
		out.String(string(in.SubtitleSuggestKey))
	}
	{
		const prefix string = ",\"season_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.SeasonID))
	}
	{
		const prefix string = ",\"open_skip_switch\":"
		out.RawString(prefix)
		out.Bool(bool(in.OpenSkipSwitch))
	}
	{
		const prefix string = ",\"allow_download\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowDownload))
	}
	{
		const prefix string = ",\"horizon_cover\":"
		out.RawString(prefix)
		out.String(string(in.HorizonCover))
	}
	{
		const prefix string = ",\"episode_card_style\":"
		out.RawString(prefix)
		out.Int(int(in.EpisodeCardStyle))
	}
	{
		const prefix string = ",\"interactive_icons\":"
		out.RawString(prefix)
		if in.InteractiveIcons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.InteractiveIcons {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"remind\":"
		out.RawString(prefix)
		if m, ok := in.Remind.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Remind.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Remind))
		}
	}
	{
		const prefix string = ",\"user_status\":"
		out.RawString(prefix)
		if m, ok := in.UserStatus.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UserStatus.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UserStatus))
		}
	}
	{
		const prefix string = ",\"subscribe_guide\":"
		out.RawString(prefix)
		if m, ok := in.SubscribeGuide.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.SubscribeGuide.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.SubscribeGuide))
		}
	}
	{
		const prefix string = ",\"sections\":"
		out.RawString(prefix)
		(in.Sections).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		if m, ok := in.Info.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Info.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Info))
		}
	}
	{
		const prefix string = ",\"details\":"
		out.RawString(prefix)
		if m, ok := in.Details.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Details.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Details))
		}
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		if m, ok := in.Stat.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Stat.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Stat))
		}
	}
	{
		const prefix string = ",\"season_series\":"
		out.RawString(prefix)
		if in.SeasonSeries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.SeasonSeries {
				if v14 > 0 {
					out.RawByte(',')
				}
				if m, ok := v15.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v15.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v15))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"related\":"
		out.RawString(prefix)
		if m, ok := in.Related.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Related.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Related))
		}
	}
	{
		const prefix string = ",\"for_you\":"
		out.RawString(prefix)
		if m, ok := in.ForYou.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ForYou.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ForYou))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Season2Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Season2Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFdf1eaf2EncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Season2Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Season2Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFdf1eaf2DecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar4(l, v)
}
