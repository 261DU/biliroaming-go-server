// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bstar

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson879f924cDecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(in *jlexer.Lexer, out *Subtitles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "key":
			out.Key = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "is_machine":
			out.IsMachine = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson879f924cEncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(out *jwriter.Writer, in Subtitles) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"is_machine\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMachine))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subtitles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson879f924cEncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subtitles) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson879f924cEncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subtitles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson879f924cDecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subtitles) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson879f924cDecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(l, v)
}
func easyjson879f924cDecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(in *jlexer.Lexer, out *SeasonResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "result":
			easyjson879f924cDecode(in, &out.Result)
		case "success":
			out.Success = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson879f924cEncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(out *jwriter.Writer, in SeasonResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		easyjson879f924cEncode(out, in.Result)
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.Bool(bool(in.Success))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SeasonResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson879f924cEncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SeasonResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson879f924cEncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SeasonResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson879f924cDecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SeasonResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson879f924cDecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar1(l, v)
}
func easyjson879f924cDecode(in *jlexer.Lexer, out *struct {
	SeasonID           int64         `json:"season_id"`
	Alias              string        `json:"alias"`
	CommentRestriction string        `json:"comment_restriction"`
	NoComment          string        `json:"no_comment"`
	Title              string        `json:"title"`
	Subtitle           string        `json:"subtitle"`
	DynamicSubtitle    string        `json:"dynamic_subtitle"`
	SeasonTitle        string        `json:"season_title"`
	SquareCover        string        `json:"square_cover"`
	RefineCover        string        `json:"refine_cover"`
	ShareURL           string        `json:"share_url"`
	ShareCopy          string        `json:"share_copy"`
	ShortLink          string        `json:"short_link"`
	Evaluate           string        `json:"evaluate"`
	Link               string        `json:"link"`
	Type               int           `json:"type"`
	TypeName           string        `json:"type_name"`
	Mode               int           `json:"mode"`
	Status             int           `json:"status"`
	Total              int           `json:"total"`
	Rights             interface{}   `json:"rights"`
	Publish            interface{}   `json:"publish"`
	Detail             string        `json:"detail"`
	Staff              interface{}   `json:"staff"`
	Actor              interface{}   `json:"actor"`
	OriginName         string        `json:"origin_name"`
	Styles             []interface{} `json:"styles"`
	Modules            []struct {
		ID         int    `json:"id"`
		Style      string `json:"style"`
		Title      string `json:"title"`
		More       string `json:"more"`
		CanOrdDesc int    `json:"can_ord_desc"`
		Data       struct {
			Episodes []struct {
				Aid              int         `json:"aid"`
				Cid              int         `json:"cid"`
				Cover            string      `json:"cover"`
				ID               int64       `json:"id"`
				Title            string      `json:"title"`
				LongTitle        string      `json:"long_title"`
				Status           int         `json:"status"`
				From             string      `json:"from"`
				ShareURL         string      `json:"share_url"`
				Dimension        interface{} `json:"dimension"`
				Jump             interface{} `json:"jump"`
				TitleDisplay     string      `json:"title_display"`
				LongTitleDisplay string      `json:"long_title_display"`
				Subtitles        []Subtitles `json:"subtitles"`
			} `json:"episodes"`
		} `json:"data"`
		ModuleStyle interface{} `json:"module_style"`
		Partition   int         `json:"partition"`
	} `json:"modules"`
	UpInfo             interface{}   `json:"up_info"`
	UserStatus         interface{}   `json:"user_status"`
	NewEp              interface{}   `json:"new_ep"`
	Rating             interface{}   `json:"rating"`
	Stat               interface{}   `json:"stat"`
	StatFormat         interface{}   `json:"stat_format"`
	Cover              string        `json:"cover"`
	HorizonCover       string        `json:"horizon_cover"`
	Areas              []interface{} `json:"areas"`
	Limit              interface{}   `json:"limit"`
	Payment            interface{}   `json:"payment"`
	ActivityDialog     interface{}   `json:"activity_dialog"`
	LoginDialog        interface{}   `json:"login_dialog"`
	UpdatePartten      string        `json:"update_partten"`
	Series             interface{}   `json:"series"`
	SubtitleSuggestKey string        `json:"subtitle_suggest_key"`
	OpenSkipSwitch     bool          `json:"open_skip_switch"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "season_id":
			out.SeasonID = int64(in.Int64())
		case "alias":
			out.Alias = string(in.String())
		case "comment_restriction":
			out.CommentRestriction = string(in.String())
		case "no_comment":
			out.NoComment = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "subtitle":
			out.Subtitle = string(in.String())
		case "dynamic_subtitle":
			out.DynamicSubtitle = string(in.String())
		case "season_title":
			out.SeasonTitle = string(in.String())
		case "square_cover":
			out.SquareCover = string(in.String())
		case "refine_cover":
			out.RefineCover = string(in.String())
		case "share_url":
			out.ShareURL = string(in.String())
		case "share_copy":
			out.ShareCopy = string(in.String())
		case "short_link":
			out.ShortLink = string(in.String())
		case "evaluate":
			out.Evaluate = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "type_name":
			out.TypeName = string(in.String())
		case "mode":
			out.Mode = int(in.Int())
		case "status":
			out.Status = int(in.Int())
		case "total":
			out.Total = int(in.Int())
		case "rights":
			if m, ok := out.Rights.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Rights.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Rights = in.Interface()
			}
		case "publish":
			if m, ok := out.Publish.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Publish.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Publish = in.Interface()
			}
		case "detail":
			out.Detail = string(in.String())
		case "staff":
			if m, ok := out.Staff.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Staff.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Staff = in.Interface()
			}
		case "actor":
			if m, ok := out.Actor.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Actor.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Actor = in.Interface()
			}
		case "origin_name":
			out.OriginName = string(in.String())
		case "styles":
			if in.IsNull() {
				in.Skip()
				out.Styles = nil
			} else {
				in.Delim('[')
				if out.Styles == nil {
					if !in.IsDelim(']') {
						out.Styles = make([]interface{}, 0, 4)
					} else {
						out.Styles = []interface{}{}
					}
				} else {
					out.Styles = (out.Styles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					out.Styles = append(out.Styles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "modules":
			if in.IsNull() {
				in.Skip()
				out.Modules = nil
			} else {
				in.Delim('[')
				if out.Modules == nil {
					if !in.IsDelim(']') {
						out.Modules = make([]struct {
							ID         int    `json:"id"`
							Style      string `json:"style"`
							Title      string `json:"title"`
							More       string `json:"more"`
							CanOrdDesc int    `json:"can_ord_desc"`
							Data       struct {
								Episodes []struct {
									Aid              int         `json:"aid"`
									Cid              int         `json:"cid"`
									Cover            string      `json:"cover"`
									ID               int64       `json:"id"`
									Title            string      `json:"title"`
									LongTitle        string      `json:"long_title"`
									Status           int         `json:"status"`
									From             string      `json:"from"`
									ShareURL         string      `json:"share_url"`
									Dimension        interface{} `json:"dimension"`
									Jump             interface{} `json:"jump"`
									TitleDisplay     string      `json:"title_display"`
									LongTitleDisplay string      `json:"long_title_display"`
									Subtitles        []Subtitles `json:"subtitles"`
								} `json:"episodes"`
							} `json:"data"`
							ModuleStyle interface{} `json:"module_style"`
							Partition   int         `json:"partition"`
						}, 0, 0)
					} else {
						out.Modules = []struct {
							ID         int    `json:"id"`
							Style      string `json:"style"`
							Title      string `json:"title"`
							More       string `json:"more"`
							CanOrdDesc int    `json:"can_ord_desc"`
							Data       struct {
								Episodes []struct {
									Aid              int         `json:"aid"`
									Cid              int         `json:"cid"`
									Cover            string      `json:"cover"`
									ID               int64       `json:"id"`
									Title            string      `json:"title"`
									LongTitle        string      `json:"long_title"`
									Status           int         `json:"status"`
									From             string      `json:"from"`
									ShareURL         string      `json:"share_url"`
									Dimension        interface{} `json:"dimension"`
									Jump             interface{} `json:"jump"`
									TitleDisplay     string      `json:"title_display"`
									LongTitleDisplay string      `json:"long_title_display"`
									Subtitles        []Subtitles `json:"subtitles"`
								} `json:"episodes"`
							} `json:"data"`
							ModuleStyle interface{} `json:"module_style"`
							Partition   int         `json:"partition"`
						}{}
					}
				} else {
					out.Modules = (out.Modules)[:0]
				}
				for !in.IsDelim(']') {
					var v2 struct {
						ID         int    `json:"id"`
						Style      string `json:"style"`
						Title      string `json:"title"`
						More       string `json:"more"`
						CanOrdDesc int    `json:"can_ord_desc"`
						Data       struct {
							Episodes []struct {
								Aid              int         `json:"aid"`
								Cid              int         `json:"cid"`
								Cover            string      `json:"cover"`
								ID               int64       `json:"id"`
								Title            string      `json:"title"`
								LongTitle        string      `json:"long_title"`
								Status           int         `json:"status"`
								From             string      `json:"from"`
								ShareURL         string      `json:"share_url"`
								Dimension        interface{} `json:"dimension"`
								Jump             interface{} `json:"jump"`
								TitleDisplay     string      `json:"title_display"`
								LongTitleDisplay string      `json:"long_title_display"`
								Subtitles        []Subtitles `json:"subtitles"`
							} `json:"episodes"`
						} `json:"data"`
						ModuleStyle interface{} `json:"module_style"`
						Partition   int         `json:"partition"`
					}
					easyjson879f924cDecode1(in, &v2)
					out.Modules = append(out.Modules, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "up_info":
			if m, ok := out.UpInfo.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UpInfo.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UpInfo = in.Interface()
			}
		case "user_status":
			if m, ok := out.UserStatus.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UserStatus.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UserStatus = in.Interface()
			}
		case "new_ep":
			if m, ok := out.NewEp.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.NewEp.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.NewEp = in.Interface()
			}
		case "rating":
			if m, ok := out.Rating.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Rating.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Rating = in.Interface()
			}
		case "stat":
			if m, ok := out.Stat.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Stat.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Stat = in.Interface()
			}
		case "stat_format":
			if m, ok := out.StatFormat.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.StatFormat.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.StatFormat = in.Interface()
			}
		case "cover":
			out.Cover = string(in.String())
		case "horizon_cover":
			out.HorizonCover = string(in.String())
		case "areas":
			if in.IsNull() {
				in.Skip()
				out.Areas = nil
			} else {
				in.Delim('[')
				if out.Areas == nil {
					if !in.IsDelim(']') {
						out.Areas = make([]interface{}, 0, 4)
					} else {
						out.Areas = []interface{}{}
					}
				} else {
					out.Areas = (out.Areas)[:0]
				}
				for !in.IsDelim(']') {
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					out.Areas = append(out.Areas, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "limit":
			if m, ok := out.Limit.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Limit.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Limit = in.Interface()
			}
		case "payment":
			if m, ok := out.Payment.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Payment.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Payment = in.Interface()
			}
		case "activity_dialog":
			if m, ok := out.ActivityDialog.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ActivityDialog.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ActivityDialog = in.Interface()
			}
		case "login_dialog":
			if m, ok := out.LoginDialog.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.LoginDialog.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.LoginDialog = in.Interface()
			}
		case "update_partten":
			out.UpdatePartten = string(in.String())
		case "series":
			if m, ok := out.Series.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Series.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Series = in.Interface()
			}
		case "subtitle_suggest_key":
			out.SubtitleSuggestKey = string(in.String())
		case "open_skip_switch":
			out.OpenSkipSwitch = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson879f924cEncode(out *jwriter.Writer, in struct {
	SeasonID           int64         `json:"season_id"`
	Alias              string        `json:"alias"`
	CommentRestriction string        `json:"comment_restriction"`
	NoComment          string        `json:"no_comment"`
	Title              string        `json:"title"`
	Subtitle           string        `json:"subtitle"`
	DynamicSubtitle    string        `json:"dynamic_subtitle"`
	SeasonTitle        string        `json:"season_title"`
	SquareCover        string        `json:"square_cover"`
	RefineCover        string        `json:"refine_cover"`
	ShareURL           string        `json:"share_url"`
	ShareCopy          string        `json:"share_copy"`
	ShortLink          string        `json:"short_link"`
	Evaluate           string        `json:"evaluate"`
	Link               string        `json:"link"`
	Type               int           `json:"type"`
	TypeName           string        `json:"type_name"`
	Mode               int           `json:"mode"`
	Status             int           `json:"status"`
	Total              int           `json:"total"`
	Rights             interface{}   `json:"rights"`
	Publish            interface{}   `json:"publish"`
	Detail             string        `json:"detail"`
	Staff              interface{}   `json:"staff"`
	Actor              interface{}   `json:"actor"`
	OriginName         string        `json:"origin_name"`
	Styles             []interface{} `json:"styles"`
	Modules            []struct {
		ID         int    `json:"id"`
		Style      string `json:"style"`
		Title      string `json:"title"`
		More       string `json:"more"`
		CanOrdDesc int    `json:"can_ord_desc"`
		Data       struct {
			Episodes []struct {
				Aid              int         `json:"aid"`
				Cid              int         `json:"cid"`
				Cover            string      `json:"cover"`
				ID               int64       `json:"id"`
				Title            string      `json:"title"`
				LongTitle        string      `json:"long_title"`
				Status           int         `json:"status"`
				From             string      `json:"from"`
				ShareURL         string      `json:"share_url"`
				Dimension        interface{} `json:"dimension"`
				Jump             interface{} `json:"jump"`
				TitleDisplay     string      `json:"title_display"`
				LongTitleDisplay string      `json:"long_title_display"`
				Subtitles        []Subtitles `json:"subtitles"`
			} `json:"episodes"`
		} `json:"data"`
		ModuleStyle interface{} `json:"module_style"`
		Partition   int         `json:"partition"`
	} `json:"modules"`
	UpInfo             interface{}   `json:"up_info"`
	UserStatus         interface{}   `json:"user_status"`
	NewEp              interface{}   `json:"new_ep"`
	Rating             interface{}   `json:"rating"`
	Stat               interface{}   `json:"stat"`
	StatFormat         interface{}   `json:"stat_format"`
	Cover              string        `json:"cover"`
	HorizonCover       string        `json:"horizon_cover"`
	Areas              []interface{} `json:"areas"`
	Limit              interface{}   `json:"limit"`
	Payment            interface{}   `json:"payment"`
	ActivityDialog     interface{}   `json:"activity_dialog"`
	LoginDialog        interface{}   `json:"login_dialog"`
	UpdatePartten      string        `json:"update_partten"`
	Series             interface{}   `json:"series"`
	SubtitleSuggestKey string        `json:"subtitle_suggest_key"`
	OpenSkipSwitch     bool          `json:"open_skip_switch"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"season_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.SeasonID))
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"comment_restriction\":"
		out.RawString(prefix)
		out.String(string(in.CommentRestriction))
	}
	{
		const prefix string = ",\"no_comment\":"
		out.RawString(prefix)
		out.String(string(in.NoComment))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"subtitle\":"
		out.RawString(prefix)
		out.String(string(in.Subtitle))
	}
	{
		const prefix string = ",\"dynamic_subtitle\":"
		out.RawString(prefix)
		out.String(string(in.DynamicSubtitle))
	}
	{
		const prefix string = ",\"season_title\":"
		out.RawString(prefix)
		out.String(string(in.SeasonTitle))
	}
	{
		const prefix string = ",\"square_cover\":"
		out.RawString(prefix)
		out.String(string(in.SquareCover))
	}
	{
		const prefix string = ",\"refine_cover\":"
		out.RawString(prefix)
		out.String(string(in.RefineCover))
	}
	{
		const prefix string = ",\"share_url\":"
		out.RawString(prefix)
		out.String(string(in.ShareURL))
	}
	{
		const prefix string = ",\"share_copy\":"
		out.RawString(prefix)
		out.String(string(in.ShareCopy))
	}
	{
		const prefix string = ",\"short_link\":"
		out.RawString(prefix)
		out.String(string(in.ShortLink))
	}
	{
		const prefix string = ",\"evaluate\":"
		out.RawString(prefix)
		out.String(string(in.Evaluate))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"type_name\":"
		out.RawString(prefix)
		out.String(string(in.TypeName))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.Int(int(in.Mode))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"rights\":"
		out.RawString(prefix)
		if m, ok := in.Rights.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Rights.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Rights))
		}
	}
	{
		const prefix string = ",\"publish\":"
		out.RawString(prefix)
		if m, ok := in.Publish.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Publish.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Publish))
		}
	}
	{
		const prefix string = ",\"detail\":"
		out.RawString(prefix)
		out.String(string(in.Detail))
	}
	{
		const prefix string = ",\"staff\":"
		out.RawString(prefix)
		if m, ok := in.Staff.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Staff.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Staff))
		}
	}
	{
		const prefix string = ",\"actor\":"
		out.RawString(prefix)
		if m, ok := in.Actor.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Actor.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Actor))
		}
	}
	{
		const prefix string = ",\"origin_name\":"
		out.RawString(prefix)
		out.String(string(in.OriginName))
	}
	{
		const prefix string = ",\"styles\":"
		out.RawString(prefix)
		if in.Styles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Styles {
				if v4 > 0 {
					out.RawByte(',')
				}
				if m, ok := v5.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v5.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v5))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"modules\":"
		out.RawString(prefix)
		if in.Modules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Modules {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjson879f924cEncode1(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"up_info\":"
		out.RawString(prefix)
		if m, ok := in.UpInfo.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UpInfo.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UpInfo))
		}
	}
	{
		const prefix string = ",\"user_status\":"
		out.RawString(prefix)
		if m, ok := in.UserStatus.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UserStatus.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UserStatus))
		}
	}
	{
		const prefix string = ",\"new_ep\":"
		out.RawString(prefix)
		if m, ok := in.NewEp.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.NewEp.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.NewEp))
		}
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		if m, ok := in.Rating.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Rating.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Rating))
		}
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		if m, ok := in.Stat.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Stat.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Stat))
		}
	}
	{
		const prefix string = ",\"stat_format\":"
		out.RawString(prefix)
		if m, ok := in.StatFormat.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.StatFormat.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.StatFormat))
		}
	}
	{
		const prefix string = ",\"cover\":"
		out.RawString(prefix)
		out.String(string(in.Cover))
	}
	{
		const prefix string = ",\"horizon_cover\":"
		out.RawString(prefix)
		out.String(string(in.HorizonCover))
	}
	{
		const prefix string = ",\"areas\":"
		out.RawString(prefix)
		if in.Areas == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Areas {
				if v8 > 0 {
					out.RawByte(',')
				}
				if m, ok := v9.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v9.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		if m, ok := in.Limit.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Limit.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Limit))
		}
	}
	{
		const prefix string = ",\"payment\":"
		out.RawString(prefix)
		if m, ok := in.Payment.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Payment.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Payment))
		}
	}
	{
		const prefix string = ",\"activity_dialog\":"
		out.RawString(prefix)
		if m, ok := in.ActivityDialog.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ActivityDialog.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ActivityDialog))
		}
	}
	{
		const prefix string = ",\"login_dialog\":"
		out.RawString(prefix)
		if m, ok := in.LoginDialog.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.LoginDialog.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.LoginDialog))
		}
	}
	{
		const prefix string = ",\"update_partten\":"
		out.RawString(prefix)
		out.String(string(in.UpdatePartten))
	}
	{
		const prefix string = ",\"series\":"
		out.RawString(prefix)
		if m, ok := in.Series.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Series.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Series))
		}
	}
	{
		const prefix string = ",\"subtitle_suggest_key\":"
		out.RawString(prefix)
		out.String(string(in.SubtitleSuggestKey))
	}
	{
		const prefix string = ",\"open_skip_switch\":"
		out.RawString(prefix)
		out.Bool(bool(in.OpenSkipSwitch))
	}
	out.RawByte('}')
}
func easyjson879f924cDecode1(in *jlexer.Lexer, out *struct {
	ID         int    `json:"id"`
	Style      string `json:"style"`
	Title      string `json:"title"`
	More       string `json:"more"`
	CanOrdDesc int    `json:"can_ord_desc"`
	Data       struct {
		Episodes []struct {
			Aid              int         `json:"aid"`
			Cid              int         `json:"cid"`
			Cover            string      `json:"cover"`
			ID               int64       `json:"id"`
			Title            string      `json:"title"`
			LongTitle        string      `json:"long_title"`
			Status           int         `json:"status"`
			From             string      `json:"from"`
			ShareURL         string      `json:"share_url"`
			Dimension        interface{} `json:"dimension"`
			Jump             interface{} `json:"jump"`
			TitleDisplay     string      `json:"title_display"`
			LongTitleDisplay string      `json:"long_title_display"`
			Subtitles        []Subtitles `json:"subtitles"`
		} `json:"episodes"`
	} `json:"data"`
	ModuleStyle interface{} `json:"module_style"`
	Partition   int         `json:"partition"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "style":
			out.Style = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "more":
			out.More = string(in.String())
		case "can_ord_desc":
			out.CanOrdDesc = int(in.Int())
		case "data":
			easyjson879f924cDecode2(in, &out.Data)
		case "module_style":
			if m, ok := out.ModuleStyle.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ModuleStyle.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ModuleStyle = in.Interface()
			}
		case "partition":
			out.Partition = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson879f924cEncode1(out *jwriter.Writer, in struct {
	ID         int    `json:"id"`
	Style      string `json:"style"`
	Title      string `json:"title"`
	More       string `json:"more"`
	CanOrdDesc int    `json:"can_ord_desc"`
	Data       struct {
		Episodes []struct {
			Aid              int         `json:"aid"`
			Cid              int         `json:"cid"`
			Cover            string      `json:"cover"`
			ID               int64       `json:"id"`
			Title            string      `json:"title"`
			LongTitle        string      `json:"long_title"`
			Status           int         `json:"status"`
			From             string      `json:"from"`
			ShareURL         string      `json:"share_url"`
			Dimension        interface{} `json:"dimension"`
			Jump             interface{} `json:"jump"`
			TitleDisplay     string      `json:"title_display"`
			LongTitleDisplay string      `json:"long_title_display"`
			Subtitles        []Subtitles `json:"subtitles"`
		} `json:"episodes"`
	} `json:"data"`
	ModuleStyle interface{} `json:"module_style"`
	Partition   int         `json:"partition"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"style\":"
		out.RawString(prefix)
		out.String(string(in.Style))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"more\":"
		out.RawString(prefix)
		out.String(string(in.More))
	}
	{
		const prefix string = ",\"can_ord_desc\":"
		out.RawString(prefix)
		out.Int(int(in.CanOrdDesc))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjson879f924cEncode2(out, in.Data)
	}
	{
		const prefix string = ",\"module_style\":"
		out.RawString(prefix)
		if m, ok := in.ModuleStyle.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ModuleStyle.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ModuleStyle))
		}
	}
	{
		const prefix string = ",\"partition\":"
		out.RawString(prefix)
		out.Int(int(in.Partition))
	}
	out.RawByte('}')
}
func easyjson879f924cDecode2(in *jlexer.Lexer, out *struct {
	Episodes []struct {
		Aid              int         `json:"aid"`
		Cid              int         `json:"cid"`
		Cover            string      `json:"cover"`
		ID               int64       `json:"id"`
		Title            string      `json:"title"`
		LongTitle        string      `json:"long_title"`
		Status           int         `json:"status"`
		From             string      `json:"from"`
		ShareURL         string      `json:"share_url"`
		Dimension        interface{} `json:"dimension"`
		Jump             interface{} `json:"jump"`
		TitleDisplay     string      `json:"title_display"`
		LongTitleDisplay string      `json:"long_title_display"`
		Subtitles        []Subtitles `json:"subtitles"`
	} `json:"episodes"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "episodes":
			if in.IsNull() {
				in.Skip()
				out.Episodes = nil
			} else {
				in.Delim('[')
				if out.Episodes == nil {
					if !in.IsDelim(']') {
						out.Episodes = make([]struct {
							Aid              int         `json:"aid"`
							Cid              int         `json:"cid"`
							Cover            string      `json:"cover"`
							ID               int64       `json:"id"`
							Title            string      `json:"title"`
							LongTitle        string      `json:"long_title"`
							Status           int         `json:"status"`
							From             string      `json:"from"`
							ShareURL         string      `json:"share_url"`
							Dimension        interface{} `json:"dimension"`
							Jump             interface{} `json:"jump"`
							TitleDisplay     string      `json:"title_display"`
							LongTitleDisplay string      `json:"long_title_display"`
							Subtitles        []Subtitles `json:"subtitles"`
						}, 0, 0)
					} else {
						out.Episodes = []struct {
							Aid              int         `json:"aid"`
							Cid              int         `json:"cid"`
							Cover            string      `json:"cover"`
							ID               int64       `json:"id"`
							Title            string      `json:"title"`
							LongTitle        string      `json:"long_title"`
							Status           int         `json:"status"`
							From             string      `json:"from"`
							ShareURL         string      `json:"share_url"`
							Dimension        interface{} `json:"dimension"`
							Jump             interface{} `json:"jump"`
							TitleDisplay     string      `json:"title_display"`
							LongTitleDisplay string      `json:"long_title_display"`
							Subtitles        []Subtitles `json:"subtitles"`
						}{}
					}
				} else {
					out.Episodes = (out.Episodes)[:0]
				}
				for !in.IsDelim(']') {
					var v10 struct {
						Aid              int         `json:"aid"`
						Cid              int         `json:"cid"`
						Cover            string      `json:"cover"`
						ID               int64       `json:"id"`
						Title            string      `json:"title"`
						LongTitle        string      `json:"long_title"`
						Status           int         `json:"status"`
						From             string      `json:"from"`
						ShareURL         string      `json:"share_url"`
						Dimension        interface{} `json:"dimension"`
						Jump             interface{} `json:"jump"`
						TitleDisplay     string      `json:"title_display"`
						LongTitleDisplay string      `json:"long_title_display"`
						Subtitles        []Subtitles `json:"subtitles"`
					}
					easyjson879f924cDecode3(in, &v10)
					out.Episodes = append(out.Episodes, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson879f924cEncode2(out *jwriter.Writer, in struct {
	Episodes []struct {
		Aid              int         `json:"aid"`
		Cid              int         `json:"cid"`
		Cover            string      `json:"cover"`
		ID               int64       `json:"id"`
		Title            string      `json:"title"`
		LongTitle        string      `json:"long_title"`
		Status           int         `json:"status"`
		From             string      `json:"from"`
		ShareURL         string      `json:"share_url"`
		Dimension        interface{} `json:"dimension"`
		Jump             interface{} `json:"jump"`
		TitleDisplay     string      `json:"title_display"`
		LongTitleDisplay string      `json:"long_title_display"`
		Subtitles        []Subtitles `json:"subtitles"`
	} `json:"episodes"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"episodes\":"
		out.RawString(prefix[1:])
		if in.Episodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Episodes {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjson879f924cEncode3(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson879f924cDecode3(in *jlexer.Lexer, out *struct {
	Aid              int         `json:"aid"`
	Cid              int         `json:"cid"`
	Cover            string      `json:"cover"`
	ID               int64       `json:"id"`
	Title            string      `json:"title"`
	LongTitle        string      `json:"long_title"`
	Status           int         `json:"status"`
	From             string      `json:"from"`
	ShareURL         string      `json:"share_url"`
	Dimension        interface{} `json:"dimension"`
	Jump             interface{} `json:"jump"`
	TitleDisplay     string      `json:"title_display"`
	LongTitleDisplay string      `json:"long_title_display"`
	Subtitles        []Subtitles `json:"subtitles"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aid":
			out.Aid = int(in.Int())
		case "cid":
			out.Cid = int(in.Int())
		case "cover":
			out.Cover = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "long_title":
			out.LongTitle = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "from":
			out.From = string(in.String())
		case "share_url":
			out.ShareURL = string(in.String())
		case "dimension":
			if m, ok := out.Dimension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Dimension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Dimension = in.Interface()
			}
		case "jump":
			if m, ok := out.Jump.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Jump.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Jump = in.Interface()
			}
		case "title_display":
			out.TitleDisplay = string(in.String())
		case "long_title_display":
			out.LongTitleDisplay = string(in.String())
		case "subtitles":
			if in.IsNull() {
				in.Skip()
				out.Subtitles = nil
			} else {
				in.Delim('[')
				if out.Subtitles == nil {
					if !in.IsDelim(']') {
						out.Subtitles = make([]Subtitles, 0, 1)
					} else {
						out.Subtitles = []Subtitles{}
					}
				} else {
					out.Subtitles = (out.Subtitles)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Subtitles
					(v13).UnmarshalEasyJSON(in)
					out.Subtitles = append(out.Subtitles, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson879f924cEncode3(out *jwriter.Writer, in struct {
	Aid              int         `json:"aid"`
	Cid              int         `json:"cid"`
	Cover            string      `json:"cover"`
	ID               int64       `json:"id"`
	Title            string      `json:"title"`
	LongTitle        string      `json:"long_title"`
	Status           int         `json:"status"`
	From             string      `json:"from"`
	ShareURL         string      `json:"share_url"`
	Dimension        interface{} `json:"dimension"`
	Jump             interface{} `json:"jump"`
	TitleDisplay     string      `json:"title_display"`
	LongTitleDisplay string      `json:"long_title_display"`
	Subtitles        []Subtitles `json:"subtitles"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"aid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Aid))
	}
	{
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.Int(int(in.Cid))
	}
	{
		const prefix string = ",\"cover\":"
		out.RawString(prefix)
		out.String(string(in.Cover))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"long_title\":"
		out.RawString(prefix)
		out.String(string(in.LongTitle))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"share_url\":"
		out.RawString(prefix)
		out.String(string(in.ShareURL))
	}
	{
		const prefix string = ",\"dimension\":"
		out.RawString(prefix)
		if m, ok := in.Dimension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Dimension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Dimension))
		}
	}
	{
		const prefix string = ",\"jump\":"
		out.RawString(prefix)
		if m, ok := in.Jump.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Jump.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Jump))
		}
	}
	{
		const prefix string = ",\"title_display\":"
		out.RawString(prefix)
		out.String(string(in.TitleDisplay))
	}
	{
		const prefix string = ",\"long_title_display\":"
		out.RawString(prefix)
		out.String(string(in.LongTitleDisplay))
	}
	{
		const prefix string = ",\"subtitles\":"
		out.RawString(prefix)
		if in.Subtitles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Subtitles {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
