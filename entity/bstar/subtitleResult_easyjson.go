// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bstar

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson18ab02cbDecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(in *jlexer.Lexer, out *SubtitleResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "ttl":
			out.TTL = int(in.Int())
		case "data":
			easyjson18ab02cbDecode(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18ab02cbEncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(out *jwriter.Writer, in SubtitleResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ttl\":"
		out.RawString(prefix)
		out.Int(int(in.TTL))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjson18ab02cbEncode(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubtitleResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18ab02cbEncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubtitleResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18ab02cbEncodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubtitleResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18ab02cbDecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubtitleResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18ab02cbDecodeGithubComJasonKhew96BiliroamingGoServerEntityBstar(l, v)
}
func easyjson18ab02cbDecode(in *jlexer.Lexer, out *struct {
	SuggestKey string `json:"suggest_key"`
	Subtitles  []struct {
		Key       string `json:"key"`
		ID        int64  `json:"id"`
		URL       string `json:"url"`
		Title     string `json:"title"`
		IsMachine bool   `json:"is_machine"`
	} `json:"subtitles"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "suggest_key":
			out.SuggestKey = string(in.String())
		case "subtitles":
			if in.IsNull() {
				in.Skip()
				out.Subtitles = nil
			} else {
				in.Delim('[')
				if out.Subtitles == nil {
					if !in.IsDelim(']') {
						out.Subtitles = make([]struct {
							Key       string `json:"key"`
							ID        int64  `json:"id"`
							URL       string `json:"url"`
							Title     string `json:"title"`
							IsMachine bool   `json:"is_machine"`
						}, 0, 1)
					} else {
						out.Subtitles = []struct {
							Key       string `json:"key"`
							ID        int64  `json:"id"`
							URL       string `json:"url"`
							Title     string `json:"title"`
							IsMachine bool   `json:"is_machine"`
						}{}
					}
				} else {
					out.Subtitles = (out.Subtitles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Key       string `json:"key"`
						ID        int64  `json:"id"`
						URL       string `json:"url"`
						Title     string `json:"title"`
						IsMachine bool   `json:"is_machine"`
					}
					easyjson18ab02cbDecode1(in, &v1)
					out.Subtitles = append(out.Subtitles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18ab02cbEncode(out *jwriter.Writer, in struct {
	SuggestKey string `json:"suggest_key"`
	Subtitles  []struct {
		Key       string `json:"key"`
		ID        int64  `json:"id"`
		URL       string `json:"url"`
		Title     string `json:"title"`
		IsMachine bool   `json:"is_machine"`
	} `json:"subtitles"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"suggest_key\":"
		out.RawString(prefix[1:])
		out.String(string(in.SuggestKey))
	}
	{
		const prefix string = ",\"subtitles\":"
		out.RawString(prefix)
		if in.Subtitles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Subtitles {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson18ab02cbEncode1(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson18ab02cbDecode1(in *jlexer.Lexer, out *struct {
	Key       string `json:"key"`
	ID        int64  `json:"id"`
	URL       string `json:"url"`
	Title     string `json:"title"`
	IsMachine bool   `json:"is_machine"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "url":
			out.URL = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "is_machine":
			out.IsMachine = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18ab02cbEncode1(out *jwriter.Writer, in struct {
	Key       string `json:"key"`
	ID        int64  `json:"id"`
	URL       string `json:"url"`
	Title     string `json:"title"`
	IsMachine bool   `json:"is_machine"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"is_machine\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMachine))
	}
	out.RawByte('}')
}
